参数类型
1普通参数
2默认参数
3关键字参数
4收集参数

收集参数tuple
def func(*args):
	func_body
  调用的时候
	func(v1,v2,v3......)
1参数名args可以不用这么写，但是推荐这么写，约定书成
2args之前必须有*
3args可以与其他参数同存，可以把args看成一个list

收集参数代码示例
def func(*args):
    print("大家好，下面我简单说两句:")
    for item in args:
        print(item)      
func("韩广阳",19,"北京中关村")
func("宋小宝",38,"东北")
大家好，下面我简单说两句:
韩广阳
19
北京中关村
大家好，下面我简单说两句:
宋小宝
38
东北



收集参数之关键字参数dict：使用字典，即k,v
1kwargs---约定俗成
2调用的时候，把多余的关键字放到kwargs中
3访问kwargs的时候，需要用字典格式进行访问
def func(**kwargs):
    print("大家好，下面我简单地做一下自我介绍")
    print(type(kwargs))#type函数可以检测变量的类型
    for k,v in kwargs.items():
        print(k,"-----",v)
    print("*"*30)
func(name="韩广阳",age=19,height=185,weight=126)
func(name="鹿晗",age=28,height=178,weight=130)

大家好，下面我简单地做一下自我介绍
<class 'dict'>#kwargs的类型是dict类，就是上文提到的字典格式
name ----- 韩广阳
age ----- 19
height ----- 185
weight ----- 126
******************************
大家好，下面我简单地做一下自我介绍
<class 'dict'>
name ----- 鹿晗
age ----- 28
height ----- 178
weight ----- 130
******************************



各种参数的混合使用
def func(name,age,hobby="没有",*args,**kwargs):
    print("大家好，下面我简单地自我介绍一下")
    print("我叫{}，我今年{}岁了".format(name,age))
    if hobby=="没有":
        print("我没有爱好，很抱歉")
    else:
        print("我的爱好是{}".format(hobby))
    print("*"*30)
    for item in args:
        print(item)
    print("$"*30)
    for k,v in kwargs.items():
        print(k,"----",v)
    print("#"*30)

func("韩广阳",19)
func("韩广阳",19,"游泳","篮球",hobby2="乒乓球",hobby3="足球")
大家好，下面我简单地自我介绍一下
我叫韩广阳，我今年19岁了
我没有爱好，很抱歉
******************************
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
##############################
大家好，下面我简单地自我介绍一下
我叫韩广阳，我今年19岁了
我的爱好是游泳
******************************
篮球
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
hobby2 ---- 乒乓球
hobby3 ---- 足球
##############################


函数文档
写法：
	1在第一行使用三字符串定义符
文档查看
	1使用help函数,help(函数名)，如help(func)
	2使用_doc_，函数名.__doc__,如func.__doc__;请注意是两个_
实例
1使用help函数
def func():
    '''
    这是文档第一行
    这是文档第二行
    这是文档第三行
    '''
    pass
help(func)
运行结果如下
Help on function func in module __main__:

func()
    这是文档第一行
    这是文档第二行
    这是文档第三行
2使用函数名.__doc__
def func():
    '''
    这是文档第一行
    这是文档第二行
    这是文档第三行
    '''
    pass

func.__doc__
运行结果如下
'\n    这是文档第一行\n    这是文档第二行\n    这是文档第三行\n    '