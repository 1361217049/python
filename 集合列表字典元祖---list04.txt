eval()函数：把一个字符串当成一个表达式来执行，并返回-表达式的结果
	函数源代码： eval(string_code,global=None,locals=None)
exec()函数：把一个字符串当成一个表达式来执行，但是没有返回值
	函数源代码： exec(string_code,global=None,locals=None)
实例一：
代码：
a=10
b=13
c=a+b
d=eval("a+b")//把括号里的字符串当成表达式来执行
print(c)
print(d)
结果:
23
23
实例二.1
a=10
b=13
c=a+b
d=exec("a+b")
print(c)
print(d)
结果
23
None

创建空列表
l=list();
l=[]
创建带值的列表
2: l=[1,2,4,5,6,78,0]
分片截取列表的操作，包含左边，不包含右边
代码：
l=[1,2,3,5,6,7,8,9]
print(l[1:5])
结果：
[2, 3, 5, 6]

下标值可以为空，默认左边是零，右边是最大下标值加一，即最后一个数
代码：
l=[1,2,3,4,5,6,7,8,9]
print(l[:])
print(l[:6])
print(l[2:])
结果：
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6]
[3, 4, 5, 6, 7, 8, 9]

还可以指定增幅
l=[1,2,3,4,5,6,7,8,9]
print(l)
print(l[1:6])
print(l[1:6:2])
结果
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[2, 3, 4, 5, 6]
[2, 4, 6]

下标为负数，默认最后一个数是-1，倒数第二个数是-2，依次-3，-4
l=[1,2,3,4,5,6,7,8,9]
print(l)
print(l[-2:-4])//之所以为空是因为默认增幅是从左向右的
print(l[-4:-2])
print(l[-2:-4:-1])//-1指定了路径是从右向左的
结果
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[]
[6, 7]
[8, 7]


加法:两个列表相加+，来连接两个列表
代码
a=[1,2,3,4,5]
b=[5,6,7,8,9]
c=a+b
print(c)
结果
[1, 2, 3, 4, 5, 5, 6, 7, 8, 9]

乘法:就是把一个列表*n,意思就是把n个列表相连接
代码:
a=[1,2,3,4,5]
c=a*3
print(c)
结果
[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]

判断一个数是否在列表里面
a=[1,2,3,4,5]
b=3;
c=b in a
print(c)
结果
True

遍历列表
代码
a=[1,2,3,4,5]
for i in a:
    print(i)
结果
1
2
3
4
5

遍历双重列表
代码
a=[["韩广阳",19],["卢宪涛",20],["宋广泽",19]]
for k,v in a:
    print(k,"------",v)
结果
韩广阳 ------ 19
卢宪涛 ------ 20
宋广泽 ------ 19

代码
a=[["韩广阳",19,"男"],["卢宪涛",20,"男"],["宋广泽",19,"男"]]
for k,v,w in a:
    print(k,"------",v,"------",w)
结果
韩广阳 ------ 19 ------ 男
卢宪涛 ------ 20 ------ 男
宋广泽 ------ 19 ------ 男

for创建
代码：
a=[1,2,3,4,5,6]
用list a创建list b
将a中所有的元素放到b中去
b=[i for i in a]
print(b)
结果
[1, 2, 3, 4, 5, 6]

另一个优点，创建新的列表的时候可以将原来列表的元素扩大或缩小
代码
a=[1,2,3,4,5,6]
b=[i*10 for i in a]
print(b)
结果
[10, 20, 30, 40, 50, 60]

另外一个优点，可以根据条件选择性的
代码
a=[i for i in range(1,20)]
b=[m for m in a if m%2==0]
print(b)
结果
[2, 4, 6, 8, 10, 12, 14, 16, 18]

代码
a=[i for i in range(1,4)]//生成一个从1到3的list
b=[i for i in range(100,400) if i%100==0]//生成一个从100到300整百的一个list
print(a)
print(b)

c=[m+n for m in a for n in b]//生成一个list，它与下面两成循环嵌套的效果一样
print(c)

for m in a:
    for n in b:
        print(m+n,end="  ")
print()

c=[m+n for m in a for n in b if m+n<=250]//还可以判断一下
print(c)
结果
[1, 2, 3]
[100, 200, 300]
[101, 201, 301, 102, 202, 302, 103, 203, 303]
101  201  301  102  202  302  103  203  303  
[101, 201, 102, 202, 103, 203]

关于list的一些常见的函数
代码
a=[i for i in range(1,10)]
print(len(a))
print(max(a))
print(min(a))
结果
9
9
1

list函数:将其他的格式转化成list类型
a=[1,2,3,4]
print(list(a))
a=" i love yinhuixin"
print(list(a))//将字符串类型转化成list类型
print(list(range(1,10)))
结果
[1, 2, 3, 4]
[' ', 'i', ' ', 'l', 'o', 'v', 'e', ' ', 'y', 'i', 'n', 'h', 'u', 'i', 'x', 'i', 'n']
[1, 2, 3, 4, 5, 6, 7, 8, 9]


在python中，有传值和传址的区别
1对于简单的数值，采用传值操作，就是在函数内部对参数的操作不影响外边的变量
2对于复杂操作，比如list,set,dict tumple,采用传址的操作，此时函数内的参数
和外部的变量是同一份内容，任何地方对参数的改变都会影响函数内部的参数和外边变量的情况

list的函数
append:在尾部追加一个数
代码：
a=[i for i in range(1,5)]
print(a)
a.append(100)
print(a)
结果
[1, 2, 3, 4]
[1, 2, 3, 4, 100]

insert:插入函数
代码：
a=[i for i in range(1,5)]
print(a)
a.insert(2,100)
print(a)
结果
[1, 2, 3, 4]
[1, 2, 100, 3, 4]

pop:从对位取出来一个函数，即把最后一个数取出来
代码
a=[i for i in range(1,5)]
print(a)
last_number=a.pop()
print(last_number)
print(a)
结果
[1, 2, 3, 4]
4
[1, 2, 3]

remove：按值删除一个数，remove在原list直接操作
代码
a=[1,3,9,5,77,5,6,64]
print(a)
a.remove(77)
print(a)
结果
[1, 3, 9, 5, 77, 5, 6, 64]
[1, 3, 9, 5, 5, 6, 64]

clear:清空list
代码
a=[1,3,9,5,77,5,6,64]
print(a)
a.clear()
print(a)
结果
[1, 3, 9, 5, 77, 5, 6, 64]
[]
